import React, {useState, useRef, useEffect} from "react";
import Head from 'next/head'
import axios from 'axios'
import { useRouter } from 'next/router'
import { Button, Alert, Space, Input, Table, Divider, Spin } from 'antd';
import { SearchOutlined, PlusCircleOutlined } from '@ant-design/icons';
import {HStack, VStack, Wrap, Text} from  '@chakra-ui/react';
import Link from "next/link";


const Employees = () =>{
  const [data, setData] = useState()
  const [loading, setLoading] = useState(true);
  const [maNV, setMaNV] = useState('')
  const [rToken, setrToken] = useState()

  const router = useRouter()
  let token

  useEffect(()=>{
    token = window.localStorage.getItem('rTokenTracuu')
  },[]) 

  useEffect(()=>{
    setTimeout(()=>{loadEmployees();}, 
    500)  
    
  },[token])

  function createEmployee(){  
    router.push('/employees/create')
  }

  function onEditEmployees (id) {
    router.push(`/employees/${id}`)
  }

  async function loadEmployees(){
    return await axios
      .post('http://localhost:3001/employees', {token: token})
      .then((res) => {
        const result = {
          status: res.data.status,
          data: res.data.result.recordset,
        }
        setData(res.data.result.recordset)
        setLoading(false)
        return(result)
      })
      .catch(function (error) {
        // handle error
        console.log(error.response)
      })
  }
  const [searchText, setSearchText] = useState('');
  const [searchedColumn, setSearchedColumn] = useState('');
  const searchInput = useRef(null);
  const handleSearch = (selectedKeys, confirm, dataIndex) => {
    confirm();
    setSearchText(selectedKeys[0]);
    setSearchedColumn(dataIndex);
  };

  const handleReset = (clearFilters) => {
    clearFilters();
    setSearchText('');
  };

  const getColumnSearchProps = (dataIndex) => ({
    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
      <div
        style={{
          padding: 8,
        }}
      >
        <Input
          ref={searchInput}
          placeholder={`Search ${dataIndex}`}
          value={selectedKeys[0]}
          onChange={(e) => setSelectedKeys(e.target.value ? [e.target.value] : [])}
          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}
          style={{
            marginBottom: 8,
            display: 'block',
          }}
        />
        <Space>
          <Button
            type="primary"
            onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}
            icon={<SearchOutlined />}
            size="small"
            style={{
              width: 90,
            }}
          >
            Search
          </Button>
          <Button
            onClick={() => clearFilters && handleReset(clearFilters)}
            size="small"
            style={{
              width: 90,
            }}
          >
            Reset
          </Button>
          <Button
            type="link"
            size="small"
            onClick={() => {
              confirm({
                closeDropdown: false,
              });
              setSearchText(selectedKeys[0]);
              setSearchedColumn(dataIndex);
            }}
          >
            Filter
          </Button>
        </Space>
      </div>
    ),
    filterIcon: (filtered) => (
      <SearchOutlined
        style={{
          color: filtered ? '#1890ff' : undefined,
        }}
      />
    ),
    onFilter: (value, record) =>
      record[dataIndex].toString().toLowerCase().includes(value.toLowerCase()),
    onFilterDropdownOpenChange: (visible) => {
      if (visible) {
        setTimeout(() => searchInput.current?.select(), 100);
      }
    },
    render: (text) =>   text
  });
  const columns = [
    {
      title: 'Mã nhân viên',
      dataIndex: 'MANV',
      key: 'MANV',
      ...getColumnSearchProps('MANV'),
    },
    {
      title: 'Họ tên',
      dataIndex: 'HOTEN',
      key: 'HOTEN',
      ...getColumnSearchProps('HOTEN'),
    },
    {
      title: 'Email',
      dataIndex: 'EMAILNV',
      key: 'EMAILNV',
      ...getColumnSearchProps('EMAILNV')
    }, 
    {
      title: 'Đơn vị',
      dataIndex: 'TENDONVI',
      key: 'TENDONVI',
      ...getColumnSearchProps('TENDONVI')
    },
    {
      title: 'Action',
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <a key={record.MANV} onClick= {() => {onEditEmployees(record.MANV)}}>Edit</a>
        </Space>
      ),
    },
  ];

  return(
    <>
      <Head>
        <title>Danh mục nhân viên</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon-16x16.png" />
      </Head>
      <VStack justifyContent={"start"} alignItems="start">
      <Space align="left" style={{ marginBottom: 16 }}>
        <Button onClick={createEmployee} type="primary" icon={<PlusCircleOutlined />}>
            Thêm mới
          </Button>
        </Space>
        <Divider />
        {loading ? <>
          <Spin tip="Loading..." spinning={loading}>
          <Alert
            message="Đang lấy dữ liệu"
            description="Vui lòng chờ trong giây lát."
            type="info"
          />
        </Spin>
        </> 
          :<Table columns={columns} dataSource={data} />}
      </VStack>
    </> 
  )
}

export default Employees;